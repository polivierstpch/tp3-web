// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TP1.API.Data;

namespace TP1.API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220224210517_MigrationInitiale")]
    partial class MigrationInitiale
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CategorieEvenement", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("EvenementsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "EvenementsId");

                    b.HasIndex("EvenementsId");

                    b.ToTable("CategorieEvenement");
                });

            modelBuilder.Entity("TP1.API.Data.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TP1.API.Data.Models.Evenement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdresseCivique")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("NomOrganisateur")
                        .HasColumnType("text");

                    b.Property<double?>("Prix")
                        .HasColumnType("double precision");

                    b.Property<string>("Titre")
                        .HasColumnType("text");

                    b.Property<int?>("VilleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VilleId");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("TP1.API.Data.Models.Participation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdresseCourriel")
                        .HasColumnType("text");

                    b.Property<bool>("EstValide")
                        .HasColumnType("boolean");

                    b.Property<int?>("EvenementId")
                        .HasColumnType("integer");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<int>("NombrePlace")
                        .HasColumnType("integer");

                    b.Property<string>("Prenom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("TP1.API.Data.Models.Ville", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Villes");
                });

            modelBuilder.Entity("CategorieEvenement", b =>
                {
                    b.HasOne("TP1.API.Data.Models.Categorie", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TP1.API.Data.Models.Evenement", null)
                        .WithMany()
                        .HasForeignKey("EvenementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TP1.API.Data.Models.Evenement", b =>
                {
                    b.HasOne("TP1.API.Data.Models.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("VilleId");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("TP1.API.Data.Models.Participation", b =>
                {
                    b.HasOne("TP1.API.Data.Models.Evenement", "Evenement")
                        .WithMany("Participations")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("TP1.API.Data.Models.Evenement", b =>
                {
                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
